package com.atlassian.jira.plugin.ext.bamboo.upgrade;

import java.net.URI;
import java.util.Collection;

import com.atlassian.applinks.api.ApplicationId;
import com.atlassian.applinks.api.ApplicationLink;
import com.atlassian.applinks.api.ApplicationType;
import com.atlassian.applinks.api.application.bamboo.BambooApplicationType;
import com.atlassian.applinks.api.auth.types.BasicAuthenticationProvider;
import com.atlassian.applinks.spi.application.ApplicationIdUtil;
import com.atlassian.applinks.spi.auth.AuthenticationConfigurationManager;
import com.atlassian.applinks.spi.link.ApplicationLinkDetails;
import com.atlassian.applinks.spi.link.MutatingApplicationLinkService;
import com.atlassian.applinks.spi.util.TypeAccessor;
import com.atlassian.jira.plugin.ext.bamboo.applinks.BambooApplicationLinkManager;
import com.atlassian.jira.plugin.ext.bamboo.upgrade.legacy.LegacyBambooServer;
import com.atlassian.jira.plugin.ext.bamboo.upgrade.legacy.manager.LegacyBambooServerManager;
import com.atlassian.sal.api.message.Message;
import com.atlassian.sal.api.upgrade.PluginUpgradeTask;

import com.google.common.collect.ImmutableMap;

import org.apache.log4j.Logger;

import static com.google.common.base.Preconditions.checkNotNull;

public class ApplicationLinkMigrationUpgradeTask implements PluginUpgradeTask
{
    private static final Logger log = Logger.getLogger(ApplicationLinkMigrationUpgradeTask.class);

    private final MutatingApplicationLinkService mutatingLinkService;
    private final LegacyBambooServerManager legacyServerManager;
    private final BambooApplicationLinkManager applinkManager;
    private final TypeAccessor typeAccessor;
    private final AuthenticationConfigurationManager authConfigManager;

    public ApplicationLinkMigrationUpgradeTask(MutatingApplicationLinkService mutatingLinkService, LegacyBambooServerManager legacyServerManager,
                                               BambooApplicationLinkManager applinkManager, AuthenticationConfigurationManager authConfigManager,
                                               TypeAccessor typeAccessor)
    {
        this.mutatingLinkService = mutatingLinkService;
        this.legacyServerManager = legacyServerManager;
        this.applinkManager = applinkManager;
        this.authConfigManager = authConfigManager;
        this.typeAccessor = typeAccessor;
    }

    public Collection<Message> doUpgrade() throws Exception
    {
        for (LegacyBambooServer server : legacyServerManager.getServers())
        {
            URI hostURI = URI.create(server.getHost());

            // if the bamboo server doesn't already have an applink registered for the current server, add one.
            if (!isApplicationLinkPreexisting(hostURI))
            {
                ApplicationId id = ApplicationIdUtil.generate(hostURI);
                ApplicationLinkDetails details = ApplicationLinkDetails.builder()
                    .name(server.getName())
                    .displayUrl(hostURI)
                    .rpcUrl(hostURI)
                    .isPrimary(legacyServerManager.isDefaultServer(server))
                    .build();

                log.info("Creating Bamboo application link for: " + server.getHost());
                mutatingLinkService.addApplicationLink(id, getBambooType(), details);

                //set up basic authentication since that is what JBAM did prior to 4.2
                ImmutableMap<String, String> authParams = ImmutableMap.<String, String>builder()
                    .put("username", server.getUsername())
                    .put("password", server.getPassword() == null ? "" : server.getPassword())
                    .build();
                authConfigManager.registerProvider(id, BasicAuthenticationProvider.class, authParams);

                // associate the applink with any bamboo projects
                if (!server.getAssociatedProjectKeys().isEmpty())
                {
                    for (String projectKey : server.getAssociatedProjectKeys())
                    {
                        log.info("Creating Bamboo application link for: " + server.getHost());
                        applinkManager.associate(projectKey, id);
                    }
                }
            }
        }

        return null;
    }

    private boolean isApplicationLinkPreexisting(URI hostURI)
    {
        // I would much rather call: mutatingLinkService.getApplicationLink(id) != null
        // However, because this generated ApplicationId might not match the ApplicationId
        // generated by BambooHostApplication, it is probably safer to implement it this way.

        for (ApplicationLink applink : applinkManager.getApplicationLinks())
        {
            if (applink.getDisplayUrl().equals(hostURI))
            {
                return true;
            }
        }

        return false;
    }

    private ApplicationType getBambooType()
    {
        return checkNotNull(typeAccessor.getApplicationType(BambooApplicationType.class), "BambooApplicationType not installed");
    }
    
    /**
     * The build number for this upgrade task. Once this upgrade task has run the plugin manager will store this
     * build number against this plugin type.  After this only upgrade tasks with higher build numbers will be run
     */
    public int getBuildNumber()
    {
        return 1;
    }

    public String getShortDescription()
    {
        return "Legacy Application Link Upgrade";
    }

    public String getPluginKey()
    {
        return "com.atlassian.jira.plugin.ext.bamboo";
    }
}
