package org.jcvi.jira.plugins.customfield.shared.config;

import com.atlassian.jira.issue.Issue;
import com.atlassian.jira.issue.customfields.CustomFieldType;
import com.atlassian.jira.issue.customfields.CustomFieldUtils;
import com.atlassian.jira.issue.customfields.manager.GenericConfigManager;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.fields.config.FieldConfig;
import com.atlassian.jira.issue.fields.config.FieldConfigItemType;
import com.atlassian.jira.issue.fields.layout.field.FieldLayoutItem;
import com.atlassian.jira.plugin.customfield.CustomFieldTypeModuleDescriptor;
import org.jcvi.jira.plugins.config.ConfigManagerStore;

import java.util.List;
import java.util.Map;

/**
 * <h2>A utility implementation of the FieldConfigItemType Interface</h2>
 * <p>The main purpose of FieldConfigItemType Objects is to create a
 * sub-section on the 'Configure Custom Field: X' page containing
 * information specific to that particular Configuration Item.</p>
 * <h3>Generating the FieldConfigItemType sub-section on the 'Configure
 * Custom Field: X' page </h3>
 * <p>
 * The Configure Custom Field 'X' page is accessed via the 'Configure'
 * link on the CustomFields summary page (Issues->Fields->CustomFields).
 * The page is divided into sections, vertically, one for each context.
 * Inside each context is a summary of the context followed by the
 * field's various configuration items for that context. (By default
 * just the 'Default Value' configuration item is used)</p>
 *
 * <p>Each FieldConfigItemType associated with the field is given a
 * separate table row in which to show an un-editable view of the
 * current state along with a link to edit the state.</p>
 *
 * <h4>Columns</h4>
 * <p>The FieldConfigItemType's row contains three columns; referred to as
 * LEFT, CENTER and RIGHT in this documentation.</p>
 * <P>LEFT:
 * This column contains only the 'heading' that identifies which
 * configuration type the rest of the line refers to. It is defined in
 * this class using the <b>getDisplayNameKey()</b> method</p>
 * <p>CENTER:
 * This column is where a summary of the state/values assigned to
 * the configuration type (in this context) are displayed. The
 * contents of the column comes from <b>getViewHtml</b>. In a typical
 * implementation this is generated by
 * <PRE>'templates/org/jcvi/jira/plugins/customfield/shared/config/view-config.vm'</PRE> </p>
 * <p>RIGHT:
 * This column contains the 'edit' link that goes to the
 * Configuration Item specific page (Normally generated by
 * an action that is defined in the atlassian-plugin.xml along
 * with the customfield. The link's attributes are:
 * <table>
 *     <tr><td>class</td><td>actionLinks subText</td></tr>
 *     <tr><td>id</td><td>customfield_&lt;custom_field_id&gt;-edit-config</td></tr>
 *     <tr><td>title</td><td>Edit &lt;getDisplayNameKey()&gt;</td></tr>
 *     <tr><td>href</td><td>&lt;getBaseEditUrl&gt;</td></tr>
 * </table>
 * The link contains: Edit &lt;getDisplayNameKey()&gt;
 * </p>
 *
 * <h4>Cells</h4>
 * <p>The three columns are defined by only 2 cells. The first cell
 * defines the LEFT column, while the RIGHT and CENTER column's
 * definitions share the second cell.</p>
 * <p>The Link is placed at the right by the CSS (or something
 * similar). The rest of the second cell appears in the center.</p>
 * <p>First cell (LEFT column). The first cell's attributes are:
 * <table>
 *     <tr><td>class</td><td>fieldLabelArea</td></tr>
 * </table>
 * </p>
 * <p>Second cells (CENTER/RIGHT columns). The second cell's
 * attributes are:
 * <table>
 *     <tr><td>class</td><td>fieldValueArea</td></tr>
 *     <tr><td>id</td><td>customfield_&lt;custom_field_id&gt;-value-config
 *     </td></tr>
 * </table>
 * User: pedworth
 * Date: 8/18/11
 */
public abstract class CFConfigItem implements FieldConfigItemType {
    private final GenericConfigManager genericConfigManager;
    private final CustomFieldTypeModuleDescriptor customFieldTypeDescriptor;

    protected CFConfigItem(CustomFieldTypeModuleDescriptor descriptor,
                           GenericConfigManager configManager) {
        this.customFieldTypeDescriptor = descriptor;
        this.genericConfigManager = configManager;
    }

    public abstract ConfigurationParameter[] getConfigurableProperties();

    //todo: when is this used?
    public abstract String getName();

    /**
     * <p>This is used to generate the CENTER column.</p>
     * <p>The default implementation of this method lists each of the
     * enumerated config fields followed by a summary of its state.
     * The format for each field is:</p>
     * <p>&lt;p&gt;&lt;field.getDisplayName&gt;:
     * &lt;field.getSummary&gt;&lt;/p&gt;</p>
     * <p>The getSummary method is passed the contents of the configuration
     * stored for that field.</p>
     * @param fieldConfig       The configuration item to get the state from
     * @param fieldLayoutItem   Currently un-used, possibly used if the
     *                          object configures the layout
     * @return HTML
     */
    public String getViewHtml(FieldConfig fieldConfig, FieldLayoutItem fieldLayoutItem) {
        CustomField field = fieldConfig.getCustomField();
        CustomFieldType fieldType = field.getCustomFieldType();

        Map<String,Object> velocityParameters =
                   CustomFieldUtils.buildParams(field,
                                                fieldConfig,
                                                null, //issue
                                                fieldLayoutItem,
                                                null, //value
                                                null, //CustomFieldValuesHolder
                                                null, //Action
                                                null);//<Map> display params
        //This can be used with $configs to get the ConfigurationObject
        //#set($configParamsMap = $configs.get($configItemTypeKey))
        velocityParameters.put("configItemTypeKey",getObjectKey());
        //This adds the FieldConfigItemType to the velocity environment
        velocityParameters.put("configItemType",this);
        return fieldType.getDescriptor().getHtml("view-config",velocityParameters);
    }

    /**
     * This method is used to produce the href attribute of the link in the RIGHT
     * column.
     * @return The alias of the Action, as defined in the atlassian-plugin.xml file
     */
    protected abstract String getActionAlias();

    /**
     * This only needs to be overridden if the action has multiple 'methods'
     * that are accessed via it's url.
     * Struts Action objects can have multiple methods that are selected via
     * ActionName!&lt;method&gt;.jspa The 'method' name is then used in a
     * java bean like way to call do&lt;method&gt; on the Action.
     * @return The name of the method to call when starting the configuration
     * process or null if the actions default should be used instead.
     */
    protected String getInitialActionMethod() {
        return null;
    }

    /**
     * This is used to generate the LEFT column and part of the title and
     * contents of the link in the RIGHT column.
     * @return a String identifying this form of configuration information
     */
    public abstract String getDisplayNameKey();

    /**
     * <p>Returns a key unique among FieldConfigItemType implementations for
     * the configuration value so it can be retrieved from a key-value pair
     * store.</p>
     * <p>In velocity the configurationObjects are stored in a variable called
     * $configs, which is a map of ObjectKey to ConfigurationObject.</p>
     * <p>When {@link #getViewHtml(com.atlassian.jira.issue.fields.config.FieldConfig, com.atlassian.jira.issue.fields.layout.field.FieldLayoutItem)}
     * is called the velocity environment has the variable $configType set.
     * The correct configType is selected, from the results of calling
     * {@link com.atlassian.jira.issue.customfields.CustomFieldType#getConfigurationItemTypes()}
     * using the value from this method</p>
     * @return the configuration key.
     */
    public abstract String getObjectKey();

    /**
     * When is this called?
     * @return The configuration items name with the plugin key appended
     * to make it easier to identify
     * todo: when is this used
     * todo: only show if debugging?
     */
    @Override
    public String getDisplayName() {
        return getName() + " ["+getPluginKey()+"]";
    }


    /**
     * This method is the JIRA interface method used to get the url for link to
     * the configuration action. To allow a test and a live version of a plugin
     * to co-exist we prepend the url with the plugin's ID.
     * Actions are mapped to *.jspa in JIRA and so we also add this suffix
     * @return The alias of the Action, as defined in the atlassian-plugin.xml file
     */
    public String getBaseEditUrl() {
        String methodName = getInitialActionMethod();
        final String method;
        if (methodName != null && !methodName.trim().isEmpty()) {
            method = "!"+methodName;
        } else {
            method = "";
        }
        return getPluginKey()+"."+getActionAlias()+method+".jspa";
    }

    protected String getPluginKey() {
        return customFieldTypeDescriptor.getPluginKey();
    }

    /**
     * This method is used to generate an entry in the $configs object
     * in the velocity context. $config is a map of
     * getObjectKey-&gt;getConfigurationObject.
     * @param issue        The issue to find the configuration for
     *                     Not used in this implementation
     * @param fieldConfig  The configuration of the field the value is for
     *                     Not used in this implementation
     * @return A Map&lt;ConfigurationParameter,String&gt; of the stored config
     */
    public Object getConfigurationObject(Issue issue, FieldConfig fieldConfig) {
        ConfigManagerStore configStore = new ConfigManagerStore(genericConfigManager,
                              fieldConfig,
                              getSettingsStorageKey(),
                              getConfigurableProperties());
        return configStore.getAllContextsValues();
    }

    //-----------------------------------------------------------------------
    //  Configuration storage methods
    //-----------------------------------------------------------------------
    /**
     * This key should be unique to the configuration item.
     * Originally this was the class's full name.
     * This caused problems though owing to the key being too long to fit
     * in the databases field.
     * This is now curtailed to just the domain. It shouldn't be too hard
     * to avoid naming conflicts in such a small group of plugins
     * @return the domain.
     * implementation of CFConfigItem
     */
    public String getSettingsStorageKey() {
        return "org.jcvi";
                //getClass().getName();
    }

    //used from the view-config Velocity Template
    // #foreach( $option in $configItemType.getConfigurableProperties())
    // used as a lookup key
    //      $!configParamsMap.get($option)
    // used as an object in it's own right
    // $option.getDisplayName()
    // $option.getSummary($value)

    //handles null configTypeNames, but the result may not be meaningful
    private FieldConfigItemType getConfigItemType(CustomFieldType fieldType,
                                                  String configTypeName) {
        List<FieldConfigItemType> types = fieldType.getConfigurationItemTypes();
        for(FieldConfigItemType type : types) {
            if (configTypeName == null || type.getObjectKey() == null) {
                return type;
            }
            if (configTypeName.equals(type.getObjectKey())) {
                return type;
            }
        }
        //it wasn't found
        return null;
    }
}
