#!/bin/bash -x

hostname=$(hostname)
LOGDIR="/usr/local/scratch/VIRAL/ST"

export ENV=prod

###############################################################################
HELP_HEADER="Creates a group of new JIRA 'Samples' and links them to the GLK"
###############################################################################
#Parameters:
# SEE functions.set_from_parameters()
# SEE functions.functions.sh:help_message()
# There are no extra parameters that this script accepts
#
#Environment Variables:
# SEE functions.set_from_parameters()
# There are no other variables inherited from the environment
#
#Files (In):
# A tuple file where the first column contains bacids can be specified as a 
# parameter (--file) or through an environment variable $file.
#Files (Out):
# NONE
#Files (Temp/diagnostic):
#  This same error file is used for all of the external command calls
       ERROR_FILE="${LOGDIR}/ST-$hostname-$$-error"
#  The CSV file generated by the database script
       SQL_OUTPUT_FILE="${LOGDIR}/ST-$hostname-$$jira.csv"
#  The output from creating the new samples in JIRA, used to update the 
#  database.
       CREATE_OUTPUT_FILE="${LOGDIR}/ST-jira-created-$hostname-$$.out"
#  A series of SQL insert statements that add the JIRA-IDs of the newly
#  created samples into the database.
       ADD_JIRA_ID_SQL="${LOGDIR}/ST-jira-update-$hostname-$$.sql"
#
#External Functions:
# set_from_parameters	Reads the commandline variables and prompts for
#                       any missing required params
# create_ST_jira        Calls the database script to get the JIRA-IDs
# safe_read             Prompts for a variable
# jira_cli		Makes calls to JIRA
###############################################################################

#get the directory that this script is in, needed for all referenced files
DIR="$( cd "$( dirname "$0" )" && pwd )"
. $DIR/lib/functions.sh
set_from_parameters "$@"

#Tailor the error message from check_samples_were_selected
export create="false" 		

#------------------------------------------------------------------------------
# Create a csv file using the lot or tuple file
#------------------------------------------------------------------------------
#Produces: $SQL_OUTPUT_FILE  (${LOGDIR}/ST-jira.csv)
#Env:(opt) $database         The GLK database to use		 
#    (opt) $lot		     The lot to use e.g. RFH301
#    (opt) $file             The file that contains the bac ids to use
#          $ERROR_FILE       The file to output any errors to
#		             (${LOGDIR}/ST-error)
#Note:     Either ($lot and $database) or $file should be set, but not both
#------------------------------------------------------------------------------
  #............................................................................
  # SQL_OUTPUT_FILE
  #............................................................................
   HEAD="Project,type,summary"
   HEAD="$HEAD,customfield_10120" $(: "Database")
   HEAD="$HEAD,customfield_10121" $(: "Collection Code")
   HEAD="$HEAD,customfield_10122" $(: "BAC Id (load)")
   HEAD="$HEAD,customfield_10100" $(: "Sample Id")
   HEAD="$HEAD,customfield_10126" $(: "Computed Subtype")
   HEAD="$HEAD,customfield_10123" $(: "Blinded Number")
   HEAD="$HEAD,customfield_10630" $(: "Lot (load)")
   HEAD="$HEAD,customfield_10731" $(: "Extent id (load)")
   HEAD="$HEAD,customfield_10730" $(: "Batch Id (load)")
  #Example: Sample Tracking,Sample,giv_DOA_37979,giv,DOA,\
  #              37979,giv_DOA_37979,H3N2,NIGSP_DOA_00001,\
  #              DOA01,1130777808982
  #............................................................................
create_ST_jira $DIR/sql/issue-create-csv-file.sql "$SQL_OUTPUT_FILE"

#------------------------------------------------------------------------------
#get comment from the user
#------------------------------------------------------------------------------
#Produces: $COMMENT
#------------------------------------------------------------------------------
export COMMENT
safe_read COMMENT "Please enter a comment"

#Creates: $JIRA_CSV_INPUT_FILE (${LOGDIR}/ST-jira-create-commented.csv) 
JIRA_CSV_INPUT_FILE="${LOGDIR}/ST-jira-create-commented-${host}-$$.csv"
cat "$SQL_OUTPUT_FILE" |\
  replace_header "$HEAD,comment" |\
  add_values_to_csv "$COMMENT" > $JIRA_CSV_INPUT_FILE

#------------------------------------------------------------------------------
#Insert the samples into jira 
#------------------------------------------------------------------------------
#Produces: CREATE_OUTPUT_FILE      (${LOGDIR}/ST-jira-created.out)
#Requires: SQL_OUTPUT_FILE         (${LOGDIR}/ST-jira.csv)
#------------------------------------------------------------------------------
  #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  # CREATE_OUTPUT_FILE
  #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  #Head:    <blank line>
  #Body:    Run: --action createIssue (--comment "<comment>")? \
  #              --summary "<db>_<collection>_<bacid>" \
  #              --project "Sample Tracking" \
  #              --type "Sample" \
  #              --custom "'Computed Subtype:<sub_type>',\
  #                        'Sample Id:<db>_<collection>_<bacid>',\
  #                        'Database:<db>',\
  #                        'Collection Code:<collection>',\
  #                        'Blinded Number:<blinded number>',\
  #                        'Extent id:<Extent id>',\
  #                        'BAC Id:<Bacid>'"
  #         <blank line>
  #Example: Run: --action createIssue --comment "test" --summary "giv_DOA_38052" --project "Sample Tracking" --type "Sample" --custom "'Computed Subtype:H3N2','Sample Id:giv_DOA_38052','Database:giv','Collection Code:DOA','Blinded Number:NIGSP_DOA_00083','Extent id:1130777809055','BAC Id:38052'"
  #
  #Footer:  Run completed successfully. <N> actions were successful from file: <SQL_OUTPUT_FILE>
  #Example: Run completed successfully. 78 actions were successful from file: ${LOGDIR}/ST-jira.csv
  #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#..............................................................................
# CALL jira_cli to Carry out the update
#..............................................................................
#Requires: $JIRA_CSV_INPUT_FILE (${LOGDIR}/ST-jira-create-commented.csv) 
#Produces: $JIRA_OUTPUT_FILE    (${LOGDIR}/ST-jira-created.out)
JIRA_OUTPUT_FILE="$CREATE_OUTPUT_FILE"
#Param:    $1                   Extra command-line options for jira
#          $2                   The error handler
#Env:      $ERROR_FILE          (${LOGDIR}/ST-error)
#          $COMMENT             The comment entered by the user
#..............................................................................
#TODO: a creation specific error handler
jira_cli "--action createIssue" check_username

#------------------------------------------------------------------------------
#convert the insertion messages into sql
#------------------------------------------------------------------------------
#Produces: ADD_JIRA_ID_SQL         (${LOGDIR}/ST-jira-update.sql)
#Requires: CREATE_OUTPUT_FILE      (${LOGDIR}/ST-jira-created.out)
#------------------------------------------------------------------------------
  #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  # ADD_JIRA_ID_SQL
  #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  #Head:    None
  #Body:    insert <db>..ExtentAttribute \
  #            (Extent_id, ExtentAttributeType_id, value) \
  #         select <Extent Id> as Extent_id, \
  #                ExtentAttributeType_id, \
  #                "<Jira Id>" as value \
  #         from <db>..ExtentAttributeType \
  #         where type = "jira_id";
  #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  #Two invocations of sed are required as otherwise the blank lines mess-up the
  #line counting. The sed script is quite long as it needs to handle the order 
  #of the parameters changing
cat $CREATE_OUTPUT_FILE | \
grep '\(^Run:\)\|\(^Issue\)' $(: "Remove blank, summary and warning lines") | \
sed -nr '
/^Run/{
  $!N;    '$(: "For all but the last line append the next line to this one")'
  s/\n/ /;'$(: "Remove the new line from the joined lines")'
  h;      '$(: "copy the line into the hold buffer, so that we can use it 
                multiple times")'
          '$(: "Find the database")'
  s/^.*10120:([a-zA-Z0-9]+).*$/insert \1..ExtentAttribute (Extent_id, ExtentAttributeType_id, value) /p;
  g;      '$(: "Restore the buffer")'
          '$(: "Find the Extent_id")'
  s/^.*10731:([0-9]+).*$/select \1 as Extent_id, ExtentAttributeType_id, /p;
  g;      '$(: "Restore the buffer")'
          '$(: "Find the jira_id")'
  s/^.*Issue ([A-Z]+-[0-9]+).*$/"\1" as value /p;
  g;      '$(: "Restore the buffer")'
          '$(: "Find the database, to reuse the value we have to re-match it")'
  s/^.*10120:([a-zA-Z0-9]+).*$/from \1..ExtentAttributeType where type = "jira_id"\ngo > \/dev\/null/p;
}' > $ADD_JIRA_ID_SQL

#------------------------------------------------------------------------------
#Mark the inserted samples with their Jira_ids
#------------------------------------------------------------------------------
#Requires:  ADD_JIRA_ID_SQL (${LOGDIR}/ST-jira-update.sql)
#Env: (opt) test            If this exists don't add to the db
#------------------------------------------------------------------------------
#TODO: error handling
  if [[ $test && ! $1 =~ "--action get.*" ]]; then
    echo "Test: Skipping altering the GLK"
  else
export DIR dbs collections
call_sqsh "$SQSH_PASSWORD" "$SQSH_USER" < $ADD_JIRA_ID_SQL
    #todo: check results for error messages
  fi
