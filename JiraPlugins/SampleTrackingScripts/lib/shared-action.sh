#Functions
# - carry_out_jira_action

. $DIR/lib/functions.sh
. $DIR/lib/shared-subtask.sh

host=$(hostname)

export LOGDIR="/usr/local/scratch/VIRAL/ST"
if [ ! -d "$LOGDIR" ]; then
    mkdir ${LOGDIR} 2>/dev/null
    chmod 0777 ${LOGDIR} 2>/devl/null
fi


function carry_out_jira_action() {
###############################################################################
#Script Prameters:
###############################################################################
#HELP_HEADER          The message displayed when called with --help
#column_name          The name of the column/field to update in JIRA
#data_collection_cmd  The command to call to set the value for the JIRA field
#jira_cmd_line        The extra params to pass to jiracli
#jira_error_handler   The command to use if an error file is generated
#set_subtask          If not empty then a subtask will be prompted for
#
###############################################################################
#Command Line Parameters:
###############################################################################
# SEE functions.set_from_parameters()
# SEE functions.functions.sh:help_message()
# There are no extra parameters that this script accepts
#
#Environment Variables:
# SEE functions.set_from_parameters()
# There are no other variables inherited from the environment
#
#Files (In):
# A tuple file where the first column contains bacids can be specified as a 
# parameter (--file) or through an environment variable $file.
#Files (Out):
# NONE
#Files (Temp/diagnostic):
# This same error file is used for all of the external command calls
export ERROR_FILE="${LOGDIR}/ST-error-${host}-$$"
# The CSV file generated by the database script or the subtask script
export CSV_LOOKUP_FILE="${LOGDIR}/ST-jira-${host}-$$.csv"
## reset after calling the actions logic
# The file used by jira_cli to carry out the update
export JIRA_CSV_INPUT_FILE="${LOGDIR}/ST-jira-${column_name}-${host}-$$.csv"
# The file to write the jira_cli output to
export JIRA_OUTPUT_FILE="${LOGDIR}/ST-jira-${column_name}-${host}-$$.out"
#
#External Functions:
# functions.sh
#  set_from_parameters  Reads the commandline variables and prompts for
#                       any missing required params
#  create_ST_jira       Calls the database script to get the 
#                       JIRA-IDs (only used in Sample-xxxx)
#  safe_read            Prompts for a variable
#  jira_cli             Makes calls to JIRA
# shared-subtask.sh
#  find_subtasks        Queries JIRA to get the JIRA-IDs using the BAC-IDs and
#                       the sub-task type (only used in subtask-xxxx)
###############################################################################

  #----------------------------------------------------------------------------
  # Create a csv file using the lot or tuple file
  #----------------------------------------------------------------------------
  #Produces: 
  #          $CSV_LOOKUP_FILE  (${LOGDIR}/ST-jira-${host}-$$.csv)
  #Env:(opt) $database         The GLK database to use    [for samples only]
  #    (opt) $lot              The lot to use e.g. RFH301 [for samples only]
  #    (opt) $file             The file that contains the bac ids to use
  #          $ERROR_FILE       The file to output any errors to
	#		             (${LOGDIR}/ST-error-${host}-$$)
  #Note:     Either ($lot and $database) or $file should be set, but not both
  #----------------------------------------------------------------------------
    #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    # CSV_LOOKUP_FILE
    #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     HEAD="issue"
    #Body:    <JIRA_ID>
    #Example: ST-1643
    #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  if [[ "$subtask" || "$set_subtask" ]]; then 
    find_subtasks "$CSV_LOOKUP_FILE"
  else
    create_ST_jira $DIR/sql/bac-to-jira_id.sql "$CSV_LOOKUP_FILE"  
  fi

  #----------------------------------------------------------------------------
  #get a comment from the user
  #----------------------------------------------------------------------------
  # produces: $COMMENT
  #----------------------------------------------------------------------------
  COMMENT="$comment" # the value from the commandline
  export COMMENT
  safe_read COMMENT  "Please enter a comment"

  #----------------------------------------------------------------------------
  #Carry out the action specific logic to get the column value
  #----------------------------------------------------------------------------
  # produces: $value
  #----------------------------------------------------------------------------
  eval "${data_collection_cmd}"

  ## reset after calling the actions logic
  # The file used by jira_cli to carry out the update
  export JIRA_CSV_INPUT_FILE="${LOGDIR}/ST-jira-${column_name}-${host}-$$.csv"
  # The file to write the jira_cli output to
  export JIRA_OUTPUT_FILE="${LOGDIR}/ST-jira-${column_name}-${host}-$$.out"

  #----------------------------------------------------------------------------
  #create {$LOGDIR}/ST-jira-xxxx.csv
  #----------------------------------------------------------------------------
  # Produces: $JIRA_CSV_INPUT_FILE ({$LOGDIR}/ST-jira-xxxx.csv)
  # Requires: $CSV_LOOKUP_FILE ({$LOGDIR}/ST-jira.csv)
  #----------------------------------------------------------------------------
    #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    #JIRA_CSV_INPUT_FILE
    #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     HEAD="issue,$column_name,comment"
    #Body:    <JIRA_ID>,<value>
    #Example: ST-1643,xxxx
    #Note:    <value> must not contain quotes or commas
    #::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  cat "$CSV_LOOKUP_FILE" |\
  replace_header "$HEAD" |\
  add_values_to_csv "$value" "$COMMENT" > $JIRA_CSV_INPUT_FILE

  #----------------------------------------------------------------------------
  # Carry out the update
  #----------------------------------------------------------------------------
  number_of_updates="$(number_of_lines $JIRA_CSV_INPUT_FILE)"
  number_of_updates=$[$number_of_updates - 1]
  if [[ "$test" && ! "$1" =~ "--action get.*" ]]; then
    echo -n "Test: "
  fi
  echo "Carrying out $number_of_updates actions"

  #............................................................................
  # Call jira_cli to perform the update
  #............................................................................
  #Produces: JIRA_OUTPUT_FILE     (${LOGDIR}/ST-jira-${column_name}.out)
  #Requires: JIRA_CSV_INPUT_FILE  ({$LOGDIR}/ST-jira-${column_name}.csv)
  #Param:    $1                   Extra command-line options for jira
  #          $2                   The error handler
  #Env:      $ERROR_FILE          ({$LOGDIR}/ST-error)
  #          $COMMENT             The comment entered by the user
  #............................................................................
  jira_cli "${jira_cmd_line}" "${jira_error_handler}"
}
