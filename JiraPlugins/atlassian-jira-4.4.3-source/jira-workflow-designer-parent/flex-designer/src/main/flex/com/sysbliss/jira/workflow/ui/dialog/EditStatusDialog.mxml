<?xml version="1.0" encoding="utf-8"?>
<BaseDialog xmlns="com.sysbliss.jira.workflow.ui.dialog.*" xmlns:mx="http://www.adobe.com/2006/mxml"
            width="650" minWidth="650"
            height="465" minHeight="465"
            title="{niceResourceManager.getString('json','workflow.designer.status.editor')}">
    <mx:Script>
		<![CDATA[
        import com.sysbliss.jira.plugins.workflow.model.FlexJiraStatus;
        import com.sysbliss.jira.workflow.Il8n.INiceResourceManager;
        import com.sysbliss.jira.workflow.Il8n.NiceResourceManager;
        import com.sysbliss.jira.workflow.controller.JiraStatusController;
        import com.sysbliss.jira.workflow.event.EventTypes;
        import com.sysbliss.jira.workflow.event.GenericDataEvent;
        import com.sysbliss.jira.workflow.utils.MDIDialogUtils;
        import com.sysbliss.jira.workflow.utils.StatusIcon;

        import mx.collections.ArrayCollection;
        import mx.events.ListEvent;
        import mx.utils.StringUtil;

        import org.swizframework.Swiz;

        private var _names:Array;

        [Bindable]
        [Autowire]
        public var statusController:JiraStatusController;

        [Autowire]
        public var statusImageDialog:StatusImageDialog;

        [Bindable]
        public var sortedDP:ArrayCollection;

        private const niceResourceManager:INiceResourceManager = NiceResourceManager.getInstance();

        override public function onEnterKey():void {
            doSave(null);
        }

        override public function doSave(e:Event):void {
            //log.debug("dispatching do save");
            var event:GenericDataEvent = new GenericDataEvent(EventTypes.DO_STATUS_SAVE, {id:statusEditorList.selectedItem.status.id,newName:statusName.text,newDesc:statusDesc.text,iconUrl:statusIconUrl.text});
            Swiz.dispatchEvent(event);
            clear();
        }

        override public function doDelete(e:Event):void {
            //log.debug("dispatching do delete");
            var event:GenericDataEvent = new GenericDataEvent(EventTypes.DO_STATUS_DELETE, {id:statusEditorList.selectedItem.status.id});
            Swiz.dispatchEvent(event);
            clear();
        }

        [Mediate(event="${eventTypes.STATUSES_REFRESHED}")]
        override public function clear():void {
            super.clear();
            if (_childrenReady) {
                statusName.text = "";
                statusDesc.text = "";
                errorField.text = "";
                statusIconUrl.text = "/images/icons/status_generic.gif";
                _names = null;
                editButtons.deleteButton.enabled = false;
                editButtons.saveButton.enabled = false;
                statusName.enabled = false;
                statusDesc.enabled = false;
                statusIconUrl.enabled = false;
                imageButton.enabled = false;
                buttons.cancelButton.label = niceResourceManager.getString('json', 'workflow.designer.done');
            }

            var sortArray:Array = statusController.getAllStatuses().source;
            sortArray.sortOn("name");
            var newDP:Array = new Array();
            for each(var status:FlexJiraStatus in sortArray) {
                newDP.push({status:status,icon:statusController.getListIcon(status)});
            }
            sortedDP = new ArrayCollection(newDP);

        }

        private function onNameChange(e:Event):void {
            validate();
        }

        private function onURLChange(e:Event):void {
            validate();
        }

        private function validate():void {
            if (!_names) {
                createNamesArray();
            }
            var textToCheck:String = StringUtil.trim(statusName.text.toLowerCase());
            if (statusName.text == "") {
                errorField.text = niceResourceManager.getString('json', 'workflow.designer.status.name.required');
                buttons.okButton.enabled = false;
            } else if (_names.indexOf(textToCheck) > -1 && statusEditorList.selectedItem && textToCheck != String(statusEditorList.selectedItem.status.name).toLowerCase()) {
                errorField.text = niceResourceManager.getString('json', 'workflow.designer.status.name.exists');
                buttons.okButton.enabled = false;
            } else if (statusIconUrl.text == "") {
                errorField.text = niceResourceManager.getString('json', 'workflow.designer.icon.url.required');
                buttons.okButton.enabled = false;
            } else {
                errorField.text = "";
                buttons.okButton.enabled = true;
            }
        }

        private function createNamesArray():void {
            var statuses:ArrayCollection = statusController.getAllStatuses();

            _names = new Array();
            for each(var status:FlexJiraStatus in statuses) {
                _names.push(status.name.toLowerCase());
            }
        }

        private function popImageSelector():void {
            MDIDialogUtils.popModalDialog(statusImageDialog);
            statusImageDialog.clear();
        }

        [Mediate(event="${eventTypes.STATUS_ICON_SELECTED}", properties="data")]
        public function setStatusIcon(si:StatusIcon):void {
            if (_childrenReady && statusIconUrl) {
                statusIconUrl.text = si.iconUrl;
            }
        }

        private function onStatusChange(e:ListEvent):void {
            var obj:Object = statusEditorList.selectedItem;
            if (obj != null && obj.status != null) {
                initSelectedStatus(obj.status);
            }

        }

        private function initSelectedStatus(status:FlexJiraStatus):void {
            statusName.text = status.name;
            statusDesc.text = status.description;
            statusIconUrl.text = status.iconUrl;
            if (status.isActive) {
                editButtons.deleteButton.enabled = false;
            } else {
                editButtons.deleteButton.enabled = true;
            }

            editButtons.saveButton.enabled = true;
            statusName.enabled = true;
            statusDesc.enabled = true;
            statusIconUrl.enabled = true;
            imageButton.enabled = true;
            validate();
        }

        public function selectStatus(status:FlexJiraStatus):void {
            var statuses:ArrayCollection = statusEditorList.dataProvider as ArrayCollection;
            var i:int;
            var listObject:Object;
            var statusItem:FlexJiraStatus = null;
            for (i = 0; i < statuses.length; i++)
            {
                listObject = statuses.getItemAt(i);
                statusItem = listObject.status;

                if(statusItem != null && statusItem.id == status.id) {
                    statusEditorList.selectedIndex = i;
                    break;
                }
            }

            if(statusItem != null) {
                initSelectedStatus(statusItem);
            }
        }

        override public function onShowDialog():void {
            super.onShowDialog();
            statusName.setFocus();
        }
        ]]>
	</mx:Script>
    <mx:List id="statusEditorList" styleName="list" width="100%" height="100%"
             allowMultipleSelection="false"
             enabled="true"
             dragEnabled="false"
             dragMoveEnabled="false"
             dataProvider="{sortedDP}"
             change="onStatusChange(event)">
        <mx:itemRenderer>
            <mx:Component>
                <mx:VBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" verticalGap="3">
                    <mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalGap="2">
                        <mx:Image source="{data.icon}"/>
                        <mx:Label text="{data.status.name}" styleName="statusFieldLabel"/>
                    </mx:HBox>
                    <mx:Label text="{data.status.description}" width="500" styleName="statusFieldMessage"/>
                </mx:VBox>
            </mx:Component>
        </mx:itemRenderer>
    </mx:List>
    <mx:Label id="errorField" styleName="errorField" text=""/>
    <mx:Form verticalGap="10" width="100%" paddingTop="5" paddingLeft="5" paddingRight="5">
        <mx:FormItem width="100%" label="{niceResourceManager.getString('json','workflow.designer.status.name')}"
                     labelStyleName="fieldLabel" required="true">
            <mx:TextInput id="statusName" width="100%" change="onNameChange(event);" enabled="false"/>
        </mx:FormItem>
        <mx:FormItem width="100%" label="{niceResourceManager.getString('json','workflow.designer.description')}"
                     labelStyleName="fieldLabel" required="false">
            <mx:TextArea id="statusDesc" width="100%" height="60" enabled="false"/>
        </mx:FormItem>
        <mx:FormItem width="100%" label="{niceResourceManager.getString('json','workflow.designer.icon.url')}"
                     labelStyleName="fieldLabel" required="true">
            <mx:HBox width="100%">
                <mx:TextInput id="statusIconUrl" width="100%" text="/images/icons/status_generic.gif"
                              change="onURLChange(event);" enabled="false"/>
                <mx:Button id="imageButton"
                           label="{niceResourceManager.getString('json','workflow.designer.select.image')}"
                           click="popImageSelector();" enabled="false"/>
            </mx:HBox>
            <mx:Label id="draftMessage" styleName="fieldMessage"
                      text="{niceResourceManager.getString('json','workflow.designer.draft.message.relative')}"/>
        </mx:FormItem>

    </mx:Form>
    <mx:StringValidator/>

    <DialogButtonBar id="editButtons" buttonFlags="{DialogButtonBar.SAVE|DialogButtonBar.DELETE}"/>
    <mx:HRule styleName="hrule" width="100%" height="1"/>
    <DialogButtonBar id="buttons" buttonFlags="{DialogButtonBar.CANCEL}"/>
</BaseDialog>
