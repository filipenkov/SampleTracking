/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.sysbliss.jira.plugins.workflow.model
{
import mx.collections.ArrayCollection;
import mx.utils.UIDUtil;

[Bindable]
    [RemoteClass(alias="com.sysbliss.jira.plugins.workflow.model.FlexJiraWorkflowImpl")]
    public class FlexJiraWorkflowImpl extends FlexJiraWorkflowImplBase implements FlexJiraWorkflow
    {

        private var _uid:String;

        public function FlexJiraWorkflowImpl() {

        }

        public function get uid():String
        {
            if (!_uid)
            {
                _uid = UIDUtil.createUID();
            }
            return _uid;
        }

        public function set uid(s:String):void
        {
            this._uid = s;
        }

        public function getStep(id:int):FlexJiraStep
        {
            var i:int;
            var step:FlexJiraStep;
            var steps:ArrayCollection = allSteps;
            for (i = 0; i < steps.length; i++)
            {
                step = steps[i] as FlexJiraStep;
                if (step.id == id)
                {
                    break;
                } else
                {
                    step = null;
                }
            }
            return step;
        }

        public function getStepForName(name:String):FlexJiraStep
        {
            var i:int;
            var step:FlexJiraStep;
            var steps:ArrayCollection = allSteps;
            for (i = 0; i < steps.length; i++)
            {
                step = steps[i] as FlexJiraStep;
                if (step.name.toLowerCase() == name.toLowerCase())
                {
                    break;
                } else
                {
                    step = null;
                }
            }
            return step;
        }

        public function getAction(id:int):FlexJiraAction
        {
            var i:int;
            var action:FlexJiraAction;
            var actions:ArrayCollection = allActions;
            for (i = 0; i < actions.length; i++)
            {
                action = actions[i] as FlexJiraAction;
                if (action.id == id)
                {
                    break;
                } else
                {
                    action = null;
                }
            }
            return action;
        }

        public function isInitialAction(id:int):Boolean
        {
            var isInitial:Boolean = false;
            var i:int;
            var action:FlexJiraAction;
            for (i = 0; i < initialActions.length; i++)
            {
                action = initialActions.getItemAt(i) as FlexJiraAction;
                if (action.id == id)
                {
                    isInitial = true;
                    break;
                }
            }
            return isInitial;
        }

        public function getAllStepNames():ArrayCollection {
	    	var names:ArrayCollection = new ArrayCollection();
	    	for each(var step:FlexJiraStep in allSteps){
	    		names.addItem(step.name);
	    	}

	    	return names;
	    }

    public function isGlobalAction(action:FlexJiraAction):Boolean
    {
        return globalActions.contains(action);
    }
}
}