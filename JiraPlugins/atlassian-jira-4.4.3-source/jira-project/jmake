#!/bin/bash

#
# SECTION 1: defining commands
#
# This is the section that declares and implements all the commands to run
#
# 1) Add a KEY for your command to jmake_keys
# 2) Add jmake_cmd_KEY, jmake_shortdesc_KEY, jmake_options_KEY variables
# 3) Add a jmake_fn_KEY function that implements the functionality
# 4) Optionally add jmake_longdesc_KEY which should be a function printing out detailed description/help
#


# keep track of time
. "`dirname $0`/bin/timer.sh"
time=$(timer)

jmake_keys=(help BP unit run debug standalone source svnup idea vdep RP CI)

jmake_cmd_help="help"
jmake_aka_help="help"
jmake_shortdesc_help="Full help"
jmake_options_help=""

jmake_cmd_BP="bundled-plugins"
jmake_aka_BP="bp"
jmake_shortdesc_BP="Build the bundled plugins (alias bp)"
jmake_options_BP="clean noclean cleanall offline nodeps update noverifydeps"

jmake_cmd_unit="unit-tests"
jmake_aka_unit="unit-tests"
jmake_shortdesc_unit="Run all the unit tests"
jmake_options_unit="clean noclean cleanall offline update skipbundled"

jmake_cmd_run="run"
jmake_aka_run="run"
jmake_shortdesc_run="Run JIRA"
jmake_options_run="clean noclean cleanall multitenant offline update"

jmake_cmd_debug="debug"
jmake_aka_debug="debug"
jmake_shortdesc_debug="Run and Debug JIRA"
jmake_options_debug="clean noclean cleanall suspend multitenant offline update"

jmake_cmd_standalone="standalone"
jmake_aka_standalone="sa"
jmake_shortdesc_standalone="Build standalone JIRA (alias sa)"
jmake_options_standalone="clean noclean cleanall run offline update"

jmake_cmd_source="source"
jmake_aka_source="src"
jmake_shortdesc_source="Build JIRA Source Distribution (alias src)"
jmake_options_source="clean noclean cleanall offline update"

jmake_cmd_svnup="svnup"
jmake_aka_svnup="up"
jmake_shortdesc_svnup="svn up with smarts (alias up)"
jmake_options_svnup=""

jmake_cmd_idea="idea"
jmake_aka_idea="idea"
jmake_shortdesc_idea="Refresh IDEA project (close project first)"
jmake_options_idea="offline clean update"

jmake_cmd_vdep="verify-dependencies"
jmake_aka_vdep="vdep"
jmake_shortdesc_vdep="Run the maven dependency tracker plugin"
jmake_options_vdep=""

jmake_cmd_RP="ref-plugins"
jmake_aka_RP="rp"
jmake_shortdesc_RP="Build the reference plugins (alias rp)"
jmake_options_RP="clean noclean cleanall offline nodeps install update"

jmake_cmd_CI="CI"
jmake_aka_CI="ci"
jmake_shortdesc_CI="Runs the unit/func tests as in CI (ala https://jira.bamboo.atlassian.com/browse/JIRAHEAD-CI/)"
jmake_options_CI="noclean cleanall jobs func sel"

jmake_fn_help() {
    printf "Use '%s CMD --help' for more help\n\n" `basename $0`
    for x in ${jmake_keys[@]} ; do
        printf "%s %-20s" `basename $0` `cmdprop cmd $x`
        echo `cmdprop shortdesc $x`
    done
}

jmake_longdesc_help() {
    echo "Help on help on help on help... HEEELP, it's a recursive trap!"
}

jmake_fn_BP() {
    if [ -z $jmake_arg_clean ] ; then jmake_arg_clean="" ; fi
    local clean=""
    case $jmake_arg_clean in
    "clean" )
        callmvn clean -pl jira-components/jira-webapp ;;
    "cleanall" )
        clean="clean"
    esac

    local bundled_plugins_module="jira-components/jira-plugins/jira-bundled-plugins"
    callmvn $clean $jmake_arg_offline $jmake_arg_update install -Ppseudo-loc -Pide-setup -pl $bundled_plugins_module $jmake_arg_nodeps -Dmaven.test.unit.skip=true
    [ $? -eq 0 ] && callmvn -o initialize -Ppseudo-loc -Pide-setup -pl jira-components/jira-webapp -Dmaven.test.unit.skip=true
    if [ -z $jmake_arg_noverifydeps ]; then jmake_fn_vdep; fi
}

jmake_fn_unit() {
    if [ -z $jmake_arg_clean ] ; then jmake_arg_clean="noclean" ; fi
    local clean=""
    case $jmake_arg_clean in
    "clean" )
        callmvn clean -pl jira-components/jira-tests ;;
    "cleanall" )
        clean="clean"
    esac

    local bundled_plugins_module=""
    if [ -z $jmake_arg_skipbundled ]; then
        bundled_plugins_module=",jira-components/jira-plugins/jira-bundled-plugins"
    fi

    callmvn $clean $jmake_arg_offline verify -pl "jira-components/jira-tests$bundled_plugins_module" -Djira.minify.skip=true -am
}

jmake_fn_run() {
    if [ -z $jmake_arg_clean ] ; then jmake_arg_clean="noclean" ; fi
    local clean=""
    case $jmake_arg_clean in
    "clean" )
        clean="clean" ;;
    "cleanall" )
        clean="clean"
    esac

    callmvn $clean $jmake_arg_offline $jmake_arg_update verify $jmake_arg_multitenant -Dmaven.test.skip=true -Pdistribution -pl jira-distribution/jira-webapp-dist-runner -am -Drun-webapp-dist
}

jmake_fn_debug() {
    if [ -z $jmake_arg_clean ] ; then jmake_arg_clean="noclean" ; fi
    local clean=""
    case $jmake_arg_clean in
    "clean" )
        clean="clean" ;;
    "cleanall" )
        clean="clean"
    esac

    local debugsuspend="debug.suspend=n"
    case $jmake_arg_suspend in
    "suspend" )
        debugsuspend="debug.suspend=y" ;;
    esac

    callmvn $clean $jmake_arg_offline $jmake_arg_update install -Ddebug -D$debugsuspend $jmake_arg_multitenant -Dmaven.test.skip=true -Pdistribution -pl jira-distribution/jira-webapp-dist-runner -am -Drun-webapp-dist
}

jmake_fn_standalone() {
    if [ -z $jmake_arg_clean ] ; then jmake_arg_clean="noclean" ; fi
    local clean=""
    case $jmake_arg_clean in
    "clean" )
        clean="clean" ;;
    "cleanall" )
        clean="clean"
    esac

    callmvn $clean $jmake_arg_offline $jmake_arg_update install -pl jira-distribution/jira-standalone-distribution -am -Pdistribution -Dmaven.test.unit.skip=true -Dmaven.test.func.skip=true -Dmaven.test.selenium.skip=true
    bin/unpackStandalone  $jmake_arg_run
}

jmake_fn_source() {
    if [ -z $jmake_arg_clean ] ; then jmake_arg_clean="noclean" ; fi
    local clean=""
    case $jmake_arg_clean in
    "clean" )
        clean="clean" ;;
    "cleanall" )
        clean="clean"
    esac

    callmvn $clean $jmake_arg_offline $jmake_arg_update install -pl jira-distribution/jira-source-distribution -am -Pdistribution -Dmaven.test.unit.skip=true -Dmaven.test.func.skip=true -Dmaven.test.selenium.skip=true

}

jmake_fn_svnup() {
    bin/devSvnUp
}

jmake_fn_idea() {

    if [ "$jmake_arg_clean" != "" ]; then
    	cp jira-ide-support/src/main/resources/jira.idea.template jira-ide-support/src/main/resources/jira.idea.properties
    fi


    local working=false
    local i=`jps -v | grep idea`
    if [[ -n "${i//\s//}" ]]; then 
        echo ""
        echo "You have the following idea processes running"
        echo "--------------------------------------------------------------------------------"
        echo $i 
        echo "--------------------------------------------------------------------------------"
        working=true
        while $working; do
            echo ""
            read -p "Have you exited IDEA? [y/n]" yn
            case $yn in
                [Yy]* ) working=false; echo "Refreshing your IDEA settings...." ; bin/refreshIdeaSettings $jmake_arg_offline;;
                [Nn]* ) working=false;;
                * ) echo "Answer me goddamn it! Have you exited IDEA? Yes or No?";;
            esac
        done
    else
        echo "Refreshing your IDEA settings...." ; bin/refreshIdeaSettings $jmake_arg_offline;
    fi

    if [ "$jmake_arg_clean" != "" ]; then
    	jmake_fn_BP 
    fi
}

jmake_fn_vdep() {
    # unfortunately we need to reach the compile phase for the reactor to kick in...
    callmvn -pl jira-components/jira-core -DverifyDependencies -am compile
}

jmake_fn_RP() {
    if [ -z $jmake_arg_clean ] ; then jmake_arg_clean="clean" ; fi
    local clean=""
    case $jmake_arg_clean in
    "clean" )
        clean="clean" ;;
    "cleanall" )
        clean="clean"
    esac
    local ref_plugins_target=""
    if [ -z $REF_PLUGINS_LOCATION ] ; then
        ref_plugins_target="$HOME/jira-reference-plugins"
    else
        ref_plugins_target=$REF_PLUGINS_LOCATION
    fi
    if [ ! -d $ref_plugins_target ] ; then
        mkdir $ref_plugins_target
        result=$?
        if [ $result -ne 0 ] ; then
            echo "Unable to create target reference-plugins directory $ref_plugins_target. Plugin artifacts will not be copied over"
            ref_plugins_target=""
        fi
    fi
    local target=""
    if [ -z $jmake_arg_install ] ; then
        target="package"
    else
        target="install"
    fi
    local ref_modules="jira-components/jira-plugins/jira-reference-upgraded-plugin/,jira-components/jira-plugins/jira-reference-dependent-plugin/,jira-components/jira-plugins/jira-reference-upgraded-language-pack/"
    callmvn $clean $jmake_arg_offline $jmake_arg_update $target -pl $ref_modules $jmake_arg_nodeps -Dmaven.test.unit.skip=true
    local mvn_result=$?
    local jira_plugins_loc="jira-components/jira-plugins"
    local ref_plugin_locs=("$jira_plugins_loc/jira-reference-plugin" "$jira_plugins_loc/jira-reference-upgraded-plugin" "$jira_plugins_loc/jira-reference-dependent-plugin" "$jira_plugins_loc/jira-reference-language-pack" "$jira_plugins_loc/jira-reference-upgraded-language-pack")
    if [[ ( mvn_result -eq 0 ) && ( -d $ref_plugins_target ) ]] ; then
        for loc in ${ref_plugin_locs[@]} ; do
            cp -v $loc/target/jira-reference-*-SNAPSHOT.jar $ref_plugins_target
        done
    fi
}


jmake_longdesc_RP() {
    cat<<EndOfHelpMsg

jmake ref-plugins
------------------

Builds JIRA reference plugins and copies target artifacts to a specified directory.
The target directory is $HOME/jira-reference-plugins by default, unles REF_PLUGINS_LOCATION environment variable is specified.
If the target directory cannot be created, no files will be copied over.

The main maven goal is 'package' by default, unless 'install' option is provided.

The 'clean' maven goal is activated by default, unless 'noclean' option is provided.
EndOfHelpMsg
}


CI_runjob() {
    MVN_PIPE_PREFIX=$1
    shift

    local skip="yes"
    for a in $jmake_arg_jobs ; do
        if [ $MVN_PIPE_PREFIX == $a ] ; then skip="no" ; break ; fi
    done
    if [ "yes" = $skip  ] ; then
        printf "(Skipped %s)\n" $MVN_PIPE_PREFIX
        return 0;
    fi

    callmvn "$@"
    local ret=$?
    [ $ret -eq 0 ] && MVN_PIPESTATUS_GREEN="$MVN_PIPESTATUS_GREEN $MVN_PIPE_PREFIX" || MVN_PIPESTATUS_RED="$MVN_PIPESTATUS_RED $MVN_PIPE_PREFIX"
}

jmake_fn_CI() {
    if [ -z $jmake_arg_clean ] ; then jmake_arg_clean="cleanall" ; fi
    local clean=""
    case $jmake_arg_clean in
    "noclean" )
        clean="" ;;
    "cleanall" )
        clean="clean"
    esac

    rm -f jmake-CI.log

    MVN_PIPESTATUS_GREEN=""
    MVN_PIPESTATUS_RED=""

    local nFBATCHES=20
    local nSBATCHES=15
    local nWBATCHES=5

    local showjobs="";
    if [[ -z "$jmake_arg_sel" && -z "$jmake_arg_func" && -z "$jmake_arg_jobs" ]] ; then showjobs="true"; fi

    if [ -z "$jmake_arg_jobs" ] ; then
        # default jobs
        jmake_arg_jobs="COMPILE"
        if [[ -n "$jmake_arg_func" || -n $showjobs ]] ; then
            jmake_arg_jobs="$jmake_arg_jobs FUNCUNIT QUNIT"
            for (( i=1 ; i <= $nFBATCHES ; i++ )) ; do printf -v jmake_arg_jobs "%s FUNC%02d" "$jmake_arg_jobs" "$i" ; done
        fi
        if [[ -n "$jmake_arg_sel" || -n $showjobs ]] ; then
            jmake_arg_jobs="$jmake_arg_jobs SEL-UNITTESTS"
            for (( i=1 ; i <= $nSBATCHES ; i++ )) ; do printf -v jmake_arg_jobs "%s SEL%02d" "$jmake_arg_jobs" "$i" ; done
            for (( i=1 ; i <= $nWBATCHES ; i++ )) ; do printf -v jmake_arg_jobs "%s WEBDRIVERBATCH%02d" "$jmake_arg_jobs" "$i" ; done
            jmake_arg_jobs="$jmake_arg_jobs UALINT"
        fi
    fi

    if [ -n "$showjobs" ] ; then
        printf "use 'CI func' or 'CI sel' or both to run CI tests, or use 'CI jobs' to pick from the available jobs:\n"
        printf " %s\n" "$jmake_arg_jobs";
        return 1;
    fi

    CI_runjob COMPILE $clean verify \
        -Dmaven.test.unit.skip=true -Dmaven.test.func.skip=true -Dmaven.test.selenium.skip=true
    [ $? -ne 0 ] && return 1

    ## FUNC JOBS

    for (( BATCH=1 ; BATCH <= $nFBATCHES ; BATCH++ )) ; do
        rm -fr jira-distribution/jira-func-tests-runner/target # this seems necessary so that the first test doesn't see old data
        CI_runjob `printf "FUNC%02d" $BATCH` verify -pl jira-distribution/jira-func-tests-runner -am -Pdistribution \
            -Dmaven.test.unit.skip=true -Djira.security.disabled=true \
            -Datlassian.test.suite.numbatches=$nFBATCHES -Datlassian.test.suite.batch=$BATCH \
            -Djira.minify.skip=true -Dfunc.mode.plugins -Dreference.plugins
    done

    CI_runjob FUNCUNIT verify \
        -pl jira-distribution/jira-func-tests-runner -am -Pdistribution \
        -Dmaven.test.func.skip=true -Djira.security.disabled=true \
        -Djira.minify.skip=true

    CI_runjob QUNIT verify \
        -pl jira-distribution/jira-selenium-tests-runner -am -Pdistribution \
        -Dmaven.test.func.skip=true -Dmaven.test.unit.skip=true \
        -Djira.security.disabled=true -Dselenium.browser=firefox \
        -Djira.minify.skip=true -Ddev.mode.plugins -Dfunc.mode.plugins \
        -Djira.functest.single.testclass=com.atlassian.jira.webtest.qunit.QUnitRunner \
        -Djava.awt.headless=true

    ## SELENIUM JOBS

    CI_runjob SEL-UNITTESTS test \
        test -pl jira-selenium-tests -am -Dmaven.test.func.skip=true -Dmaven.test.selenium.skip=true -Dmaven.test.failure.ignore=true
                
    for (( BATCH=1 ; BATCH <= $nSBATCHES ; BATCH++ )) ; do
        rm -fr jira-distribution/jira-selenium-tests-runner/target # this seems necessary so that the first test doesn't see old data
        CI_runjob `printf "SEL%02d" $BATCH` verify \
            -pl jira-distribution/jira-selenium-tests-runner -am -Pdistribution \
            -Dmaven.test.func.skip=true -Dmaven.test.unit.skip=true -Djira.security.disabled=true \
            -Dselenium.browser=firefox -Djava.awt.headless=true \
            -Datlassian.test.suite.numbatches=$nSBATCHES -Datlassian.test.suite.batch=$BATCH \
            -Djira.minify.skip=true
    done

    for (( BATCH=1 ; BATCH <= $nWBATCHES ; BATCH++ )) ; do
        rm -fr jira-distribution/jira-selenium-tests-runner/target # this seems necessary so that the first test doesn't see old data
        CI_runjob `printf "WEBDRIVERBATCH%02d" $BATCH` verify \
            -pl jira-distribution/jira-selenium-tests-runner -am -Pdistribution,WebDriver \
            -Dmaven.test.func.skip=true -Dmaven.test.unit.skip=true \
            -Djira.security.disabled=true -Djava.awt.headless=true \
            -Datlassian.test.suite.numbatches=$nWBATCHES -Datlassian.test.suite.batch=$BATCH \
            -Djira.minify.skip=true \
            -Datlassian.test.suite.package=com.atlassian.jira.webtest.webdriver.tests \
            -Datlassian.test.suite.includes=WEBDRIVER_TEST -Datlassian.test.suite.excludes=TPM,RELOADABLE_PLUGINS
    done

    CI_runjob UALINT verify \
        -pl jira-distribution/jira-webapp-dist,jira-distribution/jira-integration-tests -am -Pdistribution \
        -Dmaven.test.unit.skip=true -Djira.security.disabled=true \
        -Djava.awt.headless=true -Djira.minify.skip=true -Dfunc.mode.plugins=true

    printf "\n\e[J\nPassed: \e[32;1m$MVN_PIPESTATUS_GREEN\e[00m\nFAILED: \e[31;1m$MVN_PIPESTATUS_RED\e[00m\n\n"

    printf "(Also see jmake-CI.log for a copy of the console output.)\n"
}

jmake_longdesc_CI() {
    cat<<EndOfHelpMsg

jmake CI
--------

Runs the unit/func tests as in CI (ala https://jira.bamboo.atlassian.com/browse/JIRAHEAD-CI/)

Print out the jobs that could be run
$ jmake CI

Run the "func" plans (the CI plan)
$ jmake CI func

Run the "selenium" plans
$ jmake CI sel

Run all the plans
$ jmake CI func sel

Don't clean before running the first COMPILE
$ jmake CI noclean func

Run just one job
$ jmake CI jobs FUNC10

Run a couple of jobs
$ jmake CI jobs "FUNC10 FUNC11 FUNC12 QUNIT"

Do nothing, but print out the maven commands that would have run
$ jmake CI --dry-run jobs "FUNC10 FUNC11 FUNC12 QUNIT"

EndOfHelpMsg
}



#
# Section 2: some utils
#
# some utils you might want to use from your commands above
#


jmake_cmd_log=""
jmake_mvn_inprog=""
callmvn() {
    if [ -z "$MAVEN_OPTS" ] ; then
        export MAVEN_OPTS=-Xmx512m
    fi

    jmake_mvn_inprog="yes"
    local msg;
    printf -v msg "\e[1mmvn %s\e[00m\n" "$*"
    jmake_cmd_log+="$msg"

    local ret="noreturnvalue"
    printf "mvn %s\n" "$*"
    if [ -z "$MVN_PIPE_PREFIX" ] ; then
        $jmake_mvn_cmd "$@"
        ret=$?
    else
        #(echo foo ; sleep 0.1 ; echo bar ) | mvnpiper
        $jmake_mvn_cmd "$@" 2>&1 | mvnpiper
        ret=${PIPESTATUS[0]}
    fi

    jmake_mvn_inprog=""

    if [ $ret -ne 0 ] ; then
        printf -v msg "\e[31;1m  Command exited with status %s\e[00m\n" "$ret"
        jmake_cmd_log+="$msg"
    fi

    return $ret
}

mvnpiper() {
    SECONDS=0
    while read i ; do
        # clear to end of buffer, print the line of output
        local stamp=`printf "[%s for %2dm%02ds]" "$MVN_PIPE_PREFIX" $(($SECONDS / 60)) $(($SECONDS % 60))`
        printf "\e[J\e[7m%s\e[00m %s\n" "$stamp" "$i"
        printf "%s %s\n" "$stamp" "$i" >> jmake-CI.log

        # print N lines of status, then move cursor to start of that status
        local s="Passed: $MVN_PIPESTATUS_GREEN FAILED: $MVN_PIPESTATUS_RED"
        local nwidth=`tput cols`
        local nlines=$(( ${#s} / $nwidth + 1 ))
        printf "Passed: \e[32;1m$MVN_PIPESTATUS_GREEN\e[00m FAILED: \e[31;1m$MVN_PIPESTATUS_RED\e[00m\n\e[%dF" $nlines
    done
}

callcmd() {
    local msg;
    printf -v msg "\e[1m%s\e[00m\n" "$*"
    jmake_cmd_log+="$msg"
    printf "%s\n" "$*"
    "$@"
}

jmakerecordtime() {

    if [ "$cmd" != "" ]; then
        local dt=`date '+%Y-%m-%d %H:%m:%S'`
        local task="jmake.$cmd"
        local who=`whoami`
        local timetaken=$1

        if [ ! -d ~/.jiradev ]; then
            mkdir ~/.jiradev
        fi
        echo "$dt,$who,$task,$timetaken" >> ~/.jiradev/jiratimers.csv
    fi
}

jmakegrowl() {
	local jiradir="`dirname $0`"
	local icon="$jiradir/jira-components/jira-webapp/src/main/webapp/images/16jira.png"
	which notify-send >/dev/null 2>&1
	if [ $? -eq 0 ]; then
    notify-send -t 60000 -i "$icon" JMAKE "$@" &
    else
        which zenity >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            zenity --info --title=JMAKE --timeout=60 --window-icon="$icon"  --text="$@" &
        else
            which growlnotify >/dev/null 2>&1
            if [ $? -eq 0 ]; then
                local jiradir="`dirname $0`"
                growlnotify JMAKE --image "$icon" -m "$@" &
            fi
        fi
    fi
}

#
# Section The Rest: implementation details
#
# You probably don't need to edit the following unless you are batshit crazy.
#

cleanup() {
    trap - INT TERM EXIT
    elapsed=$(timer $time)

    jmakerecordtime $elapsed

    elapsedtime=`to_time_str $elapsed`

    # get devs back to work!
    printf -v banner "\njmake finished in %s\n\nGet back into IDEA and get JIRA out the door!" $elapsedtime
    [ "$key" != "" -a "$key" != "help" ] && [ -z "$jmake_mvn_inprog" ] && jmakegrowl "$banner"

    if [ -n "$jmake_cmd_log" ] ; then
        printf "\nCommands executed:\n%s\n" "$jmake_cmd_log"
        if [ -n "$jmake_mvn_inprog" ] ; then
            printf "\e[31;1m  Command was interrupted\e[00m\n"
        fi
        printf "\nCompleted in \e[1m%s\e[00m\n" $elapsedtime
        printf "\n"
    fi
    exit
}
trap cleanup INT TERM EXIT

cmdprop () {
    local name=jmake_${1}_${2}
    echo ${!name}
}


quickhelp() {
    printf " Commands: `basename $0` ["
    sep=""
    for x in ${jmake_keys[@]} ; do
        printf "$sep"
        sep="|"
        printf " %s " `cmdprop cmd $x`
    done
    printf " ]\n"

    echo " Try: `basename $0` CMD --help"
}

default_cmd_longdesc() {
     printf "%s %-20s" `basename $0` `cmdprop cmd $1`
     echo `cmdprop shortdesc $1`
}

if [ $# -eq 0 ] ; then
    echo "`basename $0` -- the maker's maker."
    echo ""
    quickhelp
    exit
fi

jmake_mvn_cmd="mvn"
jmake_arg_clean=""
jmake_arg_suspend=""
jmake_arg_multitenant=""
jmake_arg_offline=""
jmake_arg_nodeps=-am
jmake_arg_install=""
jmake_arg_update=""
jmake_arg_jobs=""
jmake_arg_func=""
jmake_arg_sel=""

if [ "clean" = "$1" ]
then
   jmake_arg_clean="clean"
   shift
fi

if [ "cleanall" = "$1" ]
then
   jmake_arg_clean="cleanall"
   shift
fi

cmd=$1
shift
key=""
for x in ${jmake_keys[@]} ; do
    if [ `cmdprop cmd $x` = $cmd ] ; then
        key=$x
        break
    fi
    if [ `cmdprop aka $x` = $cmd ] ; then
        key=$x
        break
    fi
done


if [ -z $key ] ; then
    printf "Don't understand: %s\n\n" $cmd
    quickhelp
    exit
fi

allowedopts=`cmdprop options $key`

# print command help if necessary
if [[ ( $# -ne 0 ) && ( $1 = "--help" ) ]] ; then
    help_fn=jmake_longdesc_$key
    if type $help_fn >/dev/null 2>&1 ; then
        $help_fn
    else
        default_cmd_longdesc $key
    fi
    key=help
    exit
fi

if [ "--dry-run" = "$1" ]
then
   jmake_mvn_cmd="echo mvn"
   shift
fi

while [ $# -ne 0 ] ; do
    arg=$1
    shift

    # is it an allowed option?
    allowed=""
    for a in $allowedopts ; do
        if [ $arg == $a ] ; then allowed=$a ; break ; fi
    done
    if [ -z $allowed ] ; then
        printf "Unknown option: %s\n" $arg
        echo "Valid options: $allowedopts"
        exit
    fi

    # handle known options
    case $arg in
    "clean" | "noclean" | "cleanall" )
        jmake_arg_clean=$arg ;;
    esac
    case $arg in
    "offline" )
        jmake_arg_offline=-o ;;
    "nodeps" )
        jmake_arg_nodeps=""
    esac
    case $arg in
    "suspend" )
        jmake_arg_suspend=$arg ;;
    "run" )
        jmake_arg_run=$arg ;;
    "multitenant")
        jmake_arg_multitenant=-Dmultitenant ;;
    esac
    case $arg in
    "install" )
        jmake_arg_install=$arg ;;
    esac
    case $arg in
    "update" )
        jmake_arg_update=-U ;;
    esac
    case $arg in
    "noverifydeps" )
        jmake_arg_noverifydeps=true ;;
    esac
    case $arg in
    "skipbundled" )
        jmake_arg_skipbundled=true ;;
    esac

    case $arg in
    "jobs" )
        jmake_arg_jobs=$1 ; shift ;;
    "func" )
        jmake_arg_func="true" ;;
    "sel" )
        jmake_arg_sel="true" ;;
    esac
done

# run the actual command
fn=jmake_fn_${key}
$fn
